package com.example.kafka.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class KafkaProducer {
    private final KafkaTemplate<String, String> kafkaTemplate;
    private final String defaultTopic;
    private final Logger logger = LoggerFactory.getLogger(KafkaProducer.class);

    public KafkaProducer(KafkaTemplate<String, String> kafkaTemplate,
                         @Value("${kafka.topic.default:test-topic}") String defaultTopic) {
        this.kafkaTemplate = kafkaTemplate;
        this.defaultTopic = defaultTopic;
    }

    public void send(String topic, String message) {
        String t = (topic == null || topic.isBlank()) ? defaultTopic : topic;
        kafkaTemplate.send(t, message).addCallback(new ListenableFutureCallback<>() {
            @Override
            public void onSuccess(org.springframework.kafka.support.SendResult<String, String> result) {
                logger.info("Sent message='{}' to topic={}, offset={}", message, t, result.getRecordMetadata().offset());
            }
            @Override
            public void onFailure(Throwable ex) {
                logger.error("Failed to send message='{}' to topic={}", message, t, ex);
            }
        });
    }
}





















package com.example.kafka.listener;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class KafkaConsumer {
    private final Logger logger = LoggerFactory.getLogger(KafkaConsumer.class);

    @KafkaListener(topics = "${kafka.topic.default:test-topic}", groupId = "${spring.kafka.consumer.group-id}")
    public void listen(String message) {
        logger.info("Received message: {}", message);
        // do processing...
    }
}

















package com.example.kafka.controller;

import com.example.kafka.service.KafkaProducer;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/kafka")
public class KafkaController {

    private final KafkaProducer producer;

    public KafkaController(KafkaProducer producer) {
        this.producer = producer;
    }

    // POST /api/kafka/publish?topic=test-topic  (body = plain text message)
    @PostMapping("/publish")
    public ResponseEntity<String> publish(@RequestParam(required = false) String topic,
                                          @RequestBody(required = false) String message) {
        if (message == null) message = "Hello Kafka!";
        producer.send(topic, message);
        return ResponseEntity.ok("Message sent to topic: " + (topic == null ? "default" : topic));
    }
}











# Kafka
spring.kafka.bootstrap-servers=localhost:9092

# Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.auto-offset-reset=earliest

# Default topic (used by code if you don't pass topic param)
kafka.topic.default=test-topic







